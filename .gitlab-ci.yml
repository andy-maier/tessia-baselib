variables:
  GIT_STRATEGY: clone
  # replace by CI_COMMIT_REF_SLUG when gitlab gets updated to 9.0+
  COMMIT_REF: $CI_BUILD_REF_SLUG
  # replace by CI_COMMIT_SHA when gitlab gets updated to 9.0+
  COMMIT_SHA: $CI_BUILD_REF

stages:
  - build
  - lint
  - unittest
  - deploy
  - cleanup

before_script:
  - echo $COMMIT_REF

build:
  stage: build
  script:
    - git bundle create tools/ci/docker/assets/tessia-baselib.git HEAD
    - docker build --force-rm -f tools/ci/docker/Dockerfile -t tessia-baselib:${COMMIT_REF} tools/ci/docker

lint:
  stage: lint
  script:
    - docker run -t --rm --name tessia-baselib.${COMMIT_REF} --entrypoint /assets/tessia-baselib/tools/run_pylint.py tessia-baselib:${COMMIT_REF}

unittest:
  stage: unittest
  script:
    - docker run -t --rm --name tessia-baselib.${COMMIT_REF} --entrypoint /assets/tessia-baselib/tools/run_tests.py tessia-baselib:${COMMIT_REF}
  coverage: '/^TOTAL.*\s+(\d+\%)$/'

# job used to push new versions of the library for consumption (as an gitlab artifact)
# should run whenever a new tag (new release) is created.
release:
  stage: deploy
  script:
    - tar zcvf tessia-baselib-${COMMIT_REF}.tgz --exclude=tools/ci/docker/assets/tessia-baselib.git *
  artifacts:
    paths:
      - tessia-baselib-${COMMIT_REF}.tgz
  only:
    - tags

snapshot:
  stage: deploy
  script:
    - echo ${COMMIT_SHA:0:7}
    - tar zcvf tessia-baselib-master_${COMMIT_SHA:0:7}.tgz --exclude=tools/ci/docker/assets/tessia-baselib.git *
  artifacts:
    paths:
      - tessia-baselib-master_${COMMIT_SHA:0:7}.tgz
  #only:
  #  - master
  when: manual

# do housekeeping on docker
cleanup:
  stage: cleanup
  when: always
  script:
    - docker rm -v $(docker ps -a -q -f "ancestor=tessia-baselib.${COMMIT_REF}") || true
    - docker rmi $(docker images -a -q -f "dangling=true") || true
    # use --no-prune to keep the cache for subsequent builds
    - docker rmi --no-prune tessia-baselib:${COMMIT_REF}
